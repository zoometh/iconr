g$site <- a.site
g$decor <- a.decor
g$label <- paste0(as.character(g$name),'-',imgs[g$name,"site"],'.',imgs[g$name,"decor"])
g$img <- imgs[g$name,"img"]
# g$name <- paste0(as.character(r),"-",a.site,'.',a.decor) # name
lgrph[[length(lgrph)+1]] <- g
}
return(lgrph)
}
lgrph <- list_grph(imgs,nodes,edges,var="type")
lgrph[[1]]$img;lgrph[[2]]$img
:nrow(imgs)
1:nrow(imgs)
a.enr <- imgs[r,]
r <- 1
a.enr <- imgs[r,]
# utils::globalVariables(names(a.enr))
a.site <- a.enr$site ; a.decor <- a.enr$decor ; a.idf <- a.enr$idf
g.nodes <- subset(nodes, site == a.site & decor == a.decor) # nodes
g.nodes <- subset(g.nodes, select=-c(site,decor))
g.edges <- subset(edges, site == a.site & decor == a.decor) # edges
g.edges <- subset(g.edges, select=-c(site,decor))
# create graph
g <- igraph::graph_from_data_frame(g.edges, directed = FALSE, vertices= g.nodes)
g.nodes.idf <- igraph::V(g)$name # get name of vertices
igraph::V(g)$name <- igraph::as_data_frame(g, what="vertices")[,var]
# V(g)$name <- V(g)$type # remplace les numeros par leur types # TODO: permit change
igraph::V(g)$idf <- g.nodes.idf
# attributes
g$name <- a.idf # graph name
g$site <- a.site
g$decor <- a.decor
g$label <- paste0(as.character(g$name),'-',imgs[g$name,"site"],'.',imgs[g$name,"decor"])
g$img <- imgs[g$name,"img"]
# g$name <- paste0(as.character(r),"-",a.site,'.',a.decor) # name
lgrph[[length(lgrph)+1]] <- g
g$img
r <- 2
a.enr <- imgs[r,]
# utils::globalVariables(names(a.enr))
a.site <- a.enr$site ; a.decor <- a.enr$decor ; a.idf <- a.enr$idf
g.nodes <- subset(nodes, site == a.site & decor == a.decor) # nodes
g.nodes <- subset(g.nodes, select=-c(site,decor))
g.edges <- subset(edges, site == a.site & decor == a.decor) # edges
g.edges <- subset(g.edges, select=-c(site,decor))
# create graph
g <- igraph::graph_from_data_frame(g.edges, directed = FALSE, vertices= g.nodes)
g.nodes.idf <- igraph::V(g)$name # get name of vertices
igraph::V(g)$name <- igraph::as_data_frame(g, what="vertices")[,var]
# V(g)$name <- V(g)$type # remplace les numeros par leur types # TODO: permit change
igraph::V(g)$idf <- g.nodes.idf
# attributes
g$name <- a.idf # graph name
g$site <- a.site
g$decor <- a.decor
g$name
g$site
g$decor
g$label <- paste0(as.character(g$name),'-',imgs[g$name,"site"],'.',imgs[g$name,"decor"])
g$label
g$name
imgs[g$name,"site"]
g$name <- a.idf # graph name
g$site <- a.site
g$decor <- a.decor
g$label <- paste0(as.character(g$name),'-',a.site,'.',a.decor)
g$label
imgs
a.enr
g$img <- a.enr[,"img"]
g$img
a.idf
list_grph <- function(imgs,
nodes,
edges,
var="type"){
# 'var': field on which the comparison will be done
# create list of graphs
lgrph <- list()
for (r in 1:nrow(imgs)){
# r <- 2
a.enr <- imgs[r,]
# utils::globalVariables(names(a.enr))
a.site <- a.enr$site ; a.decor <- a.enr$decor ; a.idf <- a.enr$idf
g.nodes <- subset(nodes, site == a.site & decor == a.decor) # nodes
g.nodes <- subset(g.nodes, select=-c(site,decor))
g.edges <- subset(edges, site == a.site & decor == a.decor) # edges
g.edges <- subset(g.edges, select=-c(site,decor))
# create graph
g <- igraph::graph_from_data_frame(g.edges, directed = FALSE, vertices= g.nodes)
g.nodes.idf <- igraph::V(g)$name # get name of vertices
igraph::V(g)$name <- igraph::as_data_frame(g, what="vertices")[,var]
# V(g)$name <- V(g)$type # remplace les numeros par leur types # TODO: permit change
igraph::V(g)$idf <- g.nodes.idf
# attributes
g$name <- a.idf # graph name
g$site <- a.site
g$decor <- a.decor
g$label <- paste0(as.character(a.idf),'-',a.site,'.',a.decor)
g$img <- a.enr[,"img"]
# g$name <- paste0(as.character(r),"-",a.site,'.',a.decor) # name
lgrph[[length(lgrph)+1]] <- g
}
return(lgrph)
}
lgrph <- list_grph(imgs,nodes,edges,var="type")
lgrph[[1]]$img;lgrph[[2]]$img
g.compar <- list_nds_compar(lgrph,"type")
igraph::get.vertex.attribute(g.compar[[1]][[1]], "color", index=igraph::V(g.compar[[1]][[1]]))
plot_nds_compar(g.compar,c(1,4))
plot_nds_compar(g.compar,c(1,4))
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
plot_nds_compar(g.compar,c(1,4))
side_plot_nds <- function(g,idf){
# a manner to use only plot()
# idf <- 2 ; g <- g
grp <- g[[idf]]
drawing.decor <- grDevices::as.raster(magick::image_read(grp$img))
graphics::plot(drawing.decor)
offset.img <- dim(drawing.decor)[1] # offset depend on raster size
# points(100,300)
# add all edges
# igraph::as_data_frame(gA)
eds.xy <- read_eds(site = grp$site,decor = grp$decor)
eds.xy$ya <- offset.img+eds.xy$ya # add the offset
eds.xy$yb <- offset.img+eds.xy$yb # add the offset
# eds.xy$ya <- abs(eds.xy$ya) ; eds.xy$yb <- abs(eds.xy$yb) # abs()
nds.xy <- read_nds(site = grp$site,decor = grp$decor)
nds.xy$y <- offset.img+nds.xy$y # add the offset
# nds.xy$y <- abs(nds.xy$y) # abs()
# modify idf of vertex because maybe two identical
grp <- igraph::set.vertex.attribute(grp, "name", value=1:igraph::gorder(grp))
# igraph::as_data_frame(grp, what="vertices")
g.nodes <- igraph::as_data_frame(grp, what="vertices")
g.nodes$y <- offset.img+g.nodes$y # add the offset
# g.nodes <- cbind(igraph::as_data_frame(grp, what="vertices"),nds.xy) # bind to get coordinates & colors
# graph.j <- edges[edges$site==gA$site & edges$decor==gA$decor,]
g.edges <- cbind(igraph::as_data_frame(grp),eds.xy) # bind to get coordinates & colors
for (edg in 1:nrow(g.edges)){
# edg <- 1
graphics::lines(c(g.edges[edg,"xa"],g.edges[edg,"xb"]),
c(g.edges[edg,"ya"],g.edges[edg,"yb"]),
lwd=g.edges[edg,"width"],col="orange")
}
for (nd in 1:nrow(g.nodes)){
graphics::points(c(g.nodes[nd,]$x), c(g.nodes[nd,]$y),
pch=16,cex=g.nodes[nd,"cex"],col=g.nodes[nd,"color"])
}
}
list_nds_compar <- function(lgrph,
var,
common.nds.color="red",
different.nds.color="orange",
common.nds.size=1,
different.nds.size=.5,
verbose=F){
# ~ TODO: var <- "type", let the user choose the var
# verbose <- T ; var <- "type"
lidf <- unlist(lapply(lgrph, function(x) x$name))
ldec.comp <- t(utils::combn(lidf, 2)) # all pairwise comparisons
if(verbose){
print(paste0("there is ",nrow(ldec.comp)," pairwise comparisons to compute"))
}
grphAllcompar <- list()
for (dec in 1:nrow(ldec.comp)){
# dec <- 1
A <- ldec.comp[dec,][1]
B <- ldec.comp[dec,][2]
# get index in the list
idxA <- which(unlist(lapply(lgrph, function(x) x$name==A)))
idxB <- which(unlist(lapply(lgrph, function(x) x$name==B)))
# get graph
gA <- lgrph[[idxA]]
gB <- lgrph[[idxB]]
# default colors
tit <- paste0("compare decorations '",A,"' and '",B,"'")
if (verbose){
print (paste0("    ",dec,") ", tit))
}
# lgcomp <- list(lgrph[[to.compare[1]]],lgrph[[to.compare[2]]])
# esss <- igraph::intersection(lgcomp)
gA.nds <- igraph::get.vertex.attribute(gA, var, index=igraph::V(gA))
gB.nds <- igraph::get.vertex.attribute(gB, var, index=igraph::V(gB))
common.nodes <- intersect(gA.nds,gB.nds)
grph2compar <- list() # out list
for(i in c(A,B)){
# loop through graphs
# i <- 4
idx.g <- which(unlist(lapply(lgrph, function(x) x$name==i)))
grp <- lgrph[[idx.g]]
g.sz <- igraph::gorder(grp) # by edges
for (n in 1:g.sz){
# n <- 1
a.n <- eval(parse(text=paste0("igraph::V(a.g)[n]$",var))) # useful to get var
if(a.n %in% common.nodes){
grp <- igraph::set_vertex_attr(grp, "color",
index = n, common.nds.color)
grp <- igraph::set_edge_attr(grp, "cex", index = e,
common.nds.size)
} else {
grp <- igraph::set_vertex_attr(grp, "color",
index = n, different.nds.color)
grp <- igraph::set_edge_attr(grp, "cex", index = e,
different.nds.size)
}
}
grph2compar[[length(grph2compar)+1]] <- grp # recompose list
}
grphAllcompar[[length(grphAllcompar)+1]] <- grph2compar
}
return(grphAllcompar)
}
lgrph <- list_grph(imgs,nodes,edges,var="type")
# lgrph[[1]]$img;lgrph[[2]]$img
g.compar <- list_nds_compar(lgrph,"type")
# igraph::get.vertex.attribute(g.compar[[1]][[1]], "color", index=igraph::V(g.compar[[1]][[1]]))
plot_nds_compar(g.compar,c(1,4))
list_nds_compar <- function(lgrph,
var,
common.nds.color="red",
different.nds.color="orange",
common.nds.size=1,
different.nds.size=.5,
verbose=F){
# ~ TODO: var <- "type", let the user choose the var
# verbose <- T ; var <- "type"
lidf <- unlist(lapply(lgrph, function(x) x$name))
ldec.comp <- t(utils::combn(lidf, 2)) # all pairwise comparisons
if(verbose){
print(paste0("there is ",nrow(ldec.comp)," pairwise comparisons to compute"))
}
grphAllcompar <- list()
for (dec in 1:nrow(ldec.comp)){
# dec <- 1
A <- ldec.comp[dec,][1]
B <- ldec.comp[dec,][2]
# get index in the list
idxA <- which(unlist(lapply(lgrph, function(x) x$name==A)))
idxB <- which(unlist(lapply(lgrph, function(x) x$name==B)))
# get graph
gA <- lgrph[[idxA]]
gB <- lgrph[[idxB]]
# default colors
tit <- paste0("compare decorations '",A,"' and '",B,"'")
if (verbose){
print (paste0("    ",dec,") ", tit))
}
# lgcomp <- list(lgrph[[to.compare[1]]],lgrph[[to.compare[2]]])
# esss <- igraph::intersection(lgcomp)
gA.nds <- igraph::get.vertex.attribute(gA, var, index=igraph::V(gA))
gB.nds <- igraph::get.vertex.attribute(gB, var, index=igraph::V(gB))
common.nodes <- intersect(gA.nds,gB.nds)
grph2compar <- list() # out list
for(i in c(A,B)){
# loop through graphs
# i <- 4
idx.g <- which(unlist(lapply(lgrph, function(x) x$name==i)))
grp <- lgrph[[idx.g]]
g.sz <- igraph::gorder(grp) # by edges
for (n in 1:g.sz){
# n <- 1
a.n <- eval(parse(text=paste0("igraph::V(a.g)[n]$",var))) # useful to get var
if(a.n %in% common.nodes){
grp <- igraph::set_vertex_attr(grp, "color", index = n,
common.nds.color)
grp <- igraph::set_edge_attr(grp, "cex", index = n,
common.nds.size)
} else {
grp <- igraph::set_vertex_attr(grp, "color", index = n,
different.nds.color)
grp <- igraph::set_edge_attr(grp, "cex", index = n,
different.nds.size)
}
}
grph2compar[[length(grph2compar)+1]] <- grp # recompose list
}
grphAllcompar[[length(grphAllcompar)+1]] <- grph2compar
}
return(grphAllcompar)
}
lgrph <- list_grph(imgs,nodes,edges,var="type")
# lgrph[[1]]$img;lgrph[[2]]$img
g.compar <- list_nds_compar(lgrph,"type")
# igraph::get.vertex.attribute(g.compar[[1]][[1]], "color", index=igraph::V(g.compar[[1]][[1]]))
plot_nds_compar(g.compar,c(1,4))
different.nds.size
list_nds_compar <- function(lgrph,
var,
common.nds.color="red",
different.nds.color="orange",
common.nds.size=1,
different.nds.size=.5,
verbose=F){
# ~ TODO: var <- "type", let the user choose the var
# verbose <- T ; var <- "type"
lidf <- unlist(lapply(lgrph, function(x) x$name))
ldec.comp <- t(utils::combn(lidf, 2)) # all pairwise comparisons
if(verbose){
print(paste0("there is ",nrow(ldec.comp)," pairwise comparisons to compute"))
}
grphAllcompar <- list()
for (dec in 1:nrow(ldec.comp)){
# dec <- 1
A <- ldec.comp[dec,][1]
B <- ldec.comp[dec,][2]
# get index in the list
idxA <- which(unlist(lapply(lgrph, function(x) x$name==A)))
idxB <- which(unlist(lapply(lgrph, function(x) x$name==B)))
# get graph
gA <- lgrph[[idxA]]
gB <- lgrph[[idxB]]
# default colors
tit <- paste0("compare decorations '",A,"' and '",B,"'")
if (verbose){
print (paste0("    ",dec,") ", tit))
}
# lgcomp <- list(lgrph[[to.compare[1]]],lgrph[[to.compare[2]]])
# esss <- igraph::intersection(lgcomp)
gA.nds <- igraph::get.vertex.attribute(gA, var, index=igraph::V(gA))
gB.nds <- igraph::get.vertex.attribute(gB, var, index=igraph::V(gB))
common.nodes <- intersect(gA.nds,gB.nds)
grph2compar <- list() # out list
for(i in c(A,B)){
# loop through graphs
# i <- 4
idx.g <- which(unlist(lapply(lgrph, function(x) x$name==i)))
grp <- lgrph[[idx.g]]
g.sz <- igraph::gorder(grp) # by edges
for (n in 1:g.sz){
# n <- 1
a.n <- eval(parse(text=paste0("igraph::V(a.g)[n]$",var))) # useful to get var
if(a.n %in% common.nodes){
grp <- igraph::set_vertex_attr(grp, "color", index = n,
common.nds.color)
grp <- igraph::set_edge_attr(grp, "cex", index = n,
common.nds.size)
} else {
grp <- igraph::set_vertex_attr(grp, "color", index = n,
different.nds.color)
grp <- igraph::set_edge_attr(grp, "cex", index = n,
different.nds.size)
}
}
grph2compar[[length(grph2compar)+1]] <- grp # recompose list
}
grphAllcompar[[length(grphAllcompar)+1]] <- grph2compar
}
return(grphAllcompar)
}
lgrph <- list_grph(imgs,nodes,edges,var="type")
# lgrph[[1]]$img;lgrph[[2]]$img
g.compar <- list_nds_compar(lgrph,"type")
# igraph::get.vertex.attribute(g.compar[[1]][[1]], "color", index=igraph::V(g.compar[[1]][[1]]))
plot_nds_compar(g.compar,c(1,4))
list_nds_compar <- function(lgrph,
var,
common.nds.color="red",
different.nds.color="orange",
common.nds.size=1,
different.nds.size=.5,
verbose=F){
# ~ TODO: var <- "type", let the user choose the var
# verbose <- T ; var <- "type"
lidf <- unlist(lapply(lgrph, function(x) x$name))
ldec.comp <- t(utils::combn(lidf, 2)) # all pairwise comparisons
if(verbose){
print(paste0("there is ",nrow(ldec.comp)," pairwise comparisons to compute"))
}
grphAllcompar <- list()
for (dec in 1:nrow(ldec.comp)){
# dec <- 1
A <- ldec.comp[dec,][1]
B <- ldec.comp[dec,][2]
# get index in the list
idxA <- which(unlist(lapply(lgrph, function(x) x$name==A)))
idxB <- which(unlist(lapply(lgrph, function(x) x$name==B)))
# get graph
gA <- lgrph[[idxA]]
gB <- lgrph[[idxB]]
# default colors
tit <- paste0("compare decorations '",A,"' and '",B,"'")
if (verbose){
print (paste0("    ",dec,") ", tit))
}
# lgcomp <- list(lgrph[[to.compare[1]]],lgrph[[to.compare[2]]])
# esss <- igraph::intersection(lgcomp)
gA.nds <- igraph::get.vertex.attribute(gA, var, index=igraph::V(gA))
gB.nds <- igraph::get.vertex.attribute(gB, var, index=igraph::V(gB))
common.nodes <- intersect(gA.nds,gB.nds)
grph2compar <- list() # out list
for(i in c(A,B)){
# loop through graphs
# i <- 4
idx.g <- which(unlist(lapply(lgrph, function(x) x$name==i)))
grp <- lgrph[[idx.g]]
g.sz <- igraph::gorder(grp) # by edges
for (n in 1:g.sz){
# n <- 1
a.n <- eval(parse(text=paste0("igraph::V(a.g)[n]$",var))) # useful to get var
if(a.n %in% common.nodes){
grp <- igraph::set_vertex_attr(grp, "color", index = n,
common.nds.color)
grp <- igraph::set_vertex_attr(grp, "cex", index = n,
common.nds.size)
} else {
grp <- igraph::set_vertex_attr(grp, "color", index = n,
different.nds.color)
grp <- igraph::set_vertex_attr(grp, "cex", index = n,
different.nds.size)
}
}
grph2compar[[length(grph2compar)+1]] <- grp # recompose list
}
grphAllcompar[[length(grphAllcompar)+1]] <- grph2compar
}
return(grphAllcompar)
}
lgrph <- list_grph(imgs,nodes,edges,var="type")
# lgrph[[1]]$img;lgrph[[2]]$img
g.compar <- list_nds_compar(lgrph,"type")
# igraph::get.vertex.attribute(g.compar[[1]][[1]], "color", index=igraph::V(g.compar[[1]][[1]]))
plot_nds_compar(g.compar,c(1,4))
i <- 1
idx.g <- which(unlist(lapply(lgrph, function(x) x$name==i)))
grp <- lgrph[[idx.g]]
g.sz <- igraph::gorder(grp) # by edges
g.sz
igraph::get.vertex.attribute(grp, "name", index=igraph::V(grp))
n <- 2
a.n <- eval(parse(text=paste0("igraph::V(a.g)[n]$",var))) # useful to get var
a.n
n <- 2
a.n <- eval(parse(text=paste0("igraph::V(a.g)[n]$",var))) # useful to get var
a.n
igraph::get.vertex.attribute(grp, "name", index=igraph::V(grp))
a.n <- eval(parse(text=paste0("igraph::V(grp)[n]$",var))) # useful to get var
a.n
a.n %in% common.nodes
list_nds_compar <- function(lgrph,
var,
common.nds.color="red",
different.nds.color="orange",
common.nds.size=1,
different.nds.size=.5,
verbose=F){
# ~ TODO: var <- "type", let the user choose the var
# verbose <- T ; var <- "type"
lidf <- unlist(lapply(lgrph, function(x) x$name))
ldec.comp <- t(utils::combn(lidf, 2)) # all pairwise comparisons
if(verbose){
print(paste0("there is ",nrow(ldec.comp)," pairwise comparisons to compute"))
}
grphAllcompar <- list()
for (dec in 1:nrow(ldec.comp)){
# dec <- 1
A <- ldec.comp[dec,][1]
B <- ldec.comp[dec,][2]
# get index in the list
idxA <- which(unlist(lapply(lgrph, function(x) x$name==A)))
idxB <- which(unlist(lapply(lgrph, function(x) x$name==B)))
# get graph
gA <- lgrph[[idxA]]
gB <- lgrph[[idxB]]
# default colors
tit <- paste0("compare decorations '",A,"' and '",B,"'")
if (verbose){
print (paste0("    ",dec,") ", tit))
}
# lgcomp <- list(lgrph[[to.compare[1]]],lgrph[[to.compare[2]]])
# esss <- igraph::intersection(lgcomp)
gA.nds <- igraph::get.vertex.attribute(gA, var, index=igraph::V(gA))
gB.nds <- igraph::get.vertex.attribute(gB, var, index=igraph::V(gB))
common.nodes <- intersect(gA.nds,gB.nds)
grph2compar <- list() # out list
for(i in c(A,B)){
# loop through graphs
# i <- 1
idx.g <- which(unlist(lapply(lgrph, function(x) x$name==i)))
grp <- lgrph[[idx.g]]
g.sz <- igraph::gorder(grp) # by edges
igraph::get.vertex.attribute(grp, "name", index=igraph::V(grp))
for (n in 1:g.sz){
# n <- 2
a.n <- eval(parse(text=paste0("igraph::V(grp)[n]$",var))) # useful to get var
if(a.n %in% common.nodes){
grp <- igraph::set_vertex_attr(grp, "color", index = n,
common.nds.color)
grp <- igraph::set_vertex_attr(grp, "cex", index = n,
common.nds.size)
} else {
grp <- igraph::set_vertex_attr(grp, "color", index = n,
different.nds.color)
grp <- igraph::set_vertex_attr(grp, "cex", index = n,
different.nds.size)
}
}
grph2compar[[length(grph2compar)+1]] <- grp # recompose list
}
grphAllcompar[[length(grphAllcompar)+1]] <- grph2compar
}
return(grphAllcompar)
}
lgrph <- list_grph(imgs,nodes,edges,var="type")
# lgrph[[1]]$img;lgrph[[2]]$img
g.compar <- list_nds_compar(lgrph,"type")
# igraph::get.vertex.attribute(g.compar[[1]][[1]], "color", index=igraph::V(g.compar[[1]][[1]]))
plot_nds_compar(g.compar,c(1,4))
