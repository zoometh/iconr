graphics::lines(c(g.edges[edg,"xa"],g.edges[edg,"xb"]),
c(g.edges[edg,"ya"],g.edges[edg,"yb"]),
lwd=g.edges[edg,"width"],col=g.edges[edg,"color"])
}
for (nd.c in 1:nrow(nds.lbl)){
# common nodes (end of common edges)
# label on the node coordinates
labels_shadow(nds.lbl[nd.c,]$x,nds.lbl[nd.c,]$y,
label=as.character(nds.lbl[nd.c,var]),
col=common.color,
bg="white",
cex=0.4,
r=0.2)
for (nd.c in 1:nrow(nds.lbl)){
# common nodes (end of common edges)
# label on the node coordinates
labels_shadow(nds.lbl[nd.c,]$x,nds.lbl[nd.c,]$y,
label=as.character(nds.lbl[nd.c,var]),
col=common.color,
bg="white",
cex=0.4,
r=0.2)
}
side_plot_eds <- function(g, idf, doss, var){
# a manner to use only plot()
# idf <- 1 ; var <- "type"
grp <- g[[idf]]
dec.img <- magick::image_read(paste0(doss, "/", grp$img))
# add the decor site and name
dec.img <- magick::image_annotate(dec.img,
paste0(grp$site,"\n",grp$decor),
gravity="northwest",size=20)
drawing.decor <- grDevices::as.raster(dec.img)
graphics::plot(drawing.decor)
offset.img <- dim(drawing.decor)[1] # offset depend on raster size
# points(100,300)
# add all edges
# igraph::as_data_frame(gA)
eds.xy <- read_eds(doss = doss,site = grp$site,decor = grp$decor)
eds.xy$ya <- offset.img+eds.xy$ya # add the offset
eds.xy$yb <- offset.img+eds.xy$yb # add the offset
# eds.xy$ya <- abs(eds.xy$ya) ; eds.xy$yb <- abs(eds.xy$yb) # abs()
nds.xy <- read_nds(doss = getwd(),site = grp$site,decor = grp$decor)
nds.xy$y <- offset.img+nds.xy$y # add the offset
# nds.xy$y <- abs(nds.xy$y) # abs()
g.edges <- cbind(igraph::as_data_frame(grp),eds.xy) # bind to get coordinates & colors
common.color <- unique(subset(g.edges, comm == 1)$color)
# get common nodes (to plot labels)
as <- subset(g.edges, comm == 1)$a ; bs <- subset(g.edges, comm == 1)$b
abs <- sort(unique(c(as,bs)))
nds.lbl <- subset(nds.xy, id %in% abs)
# graph.j <- edges[edges$site==gA$site & edges$decor==gA$decor,]
for (nd in 1:nrow(nds.xy)){
# all nodes
graphics::points(c(nds.xy[nd,]$x), c(nds.xy[nd,]$y),
pch=16,cex=0.5,col="orange")
}
for (edg in 1:nrow(g.edges)){
# all edges
# edg <- 1
graphics::lines(c(g.edges[edg,"xa"],g.edges[edg,"xb"]),
c(g.edges[edg,"ya"],g.edges[edg,"yb"]),
lwd=g.edges[edg,"width"],col=g.edges[edg,"color"])
}
for (nd.c in 1:nrow(nds.lbl)){
# common nodes (end of common edges)
# label on the node coordinates
labels_shadow(nds.lbl[nd.c,]$x,nds.lbl[nd.c,]$y,
label=as.character(nds.lbl[nd.c,var]),
col=common.color,
bg="white",
cex=0.4,
r=0.2)
}
}
)
read_nds?
read_nds()?
?read_nds
?read_nds
side_plot_nds <- function(g, idf, doss, var){
# a manner to use only plot()
# idf <- 1 ; var <- "type"
grp <- g[[idf]]
dec.img <- magick::image_read(paste0(doss, "/", grp$img))
# add the decor site and name
dec.img <- magick::image_annotate(dec.img,
paste0(grp$site,"\n",grp$decor),
gravity="northwest",size=20)
drawing.decor <- grDevices::as.raster(dec.img)
graphics::plot(drawing.decor)
offset.img <- dim(drawing.decor)[1] # offset depend on raster size
# points(100,300)
# add all edges
# igraph::as_data_frame(gA)
eds.xy <- read_eds(doss = doss, site = grp$site, decor = grp$decor)
eds.xy$ya <- offset.img+eds.xy$ya # add the offset
eds.xy$yb <- offset.img+eds.xy$yb # add the offset
# eds.xy$ya <- abs(eds.xy$ya) ; eds.xy$yb <- abs(eds.xy$yb) # abs()
nds.xy <- read_nds(doss = doss, site = grp$site, decor = grp$decor)
nds.xy$y <- offset.img+nds.xy$y # add the offset
# nds.xy$y <- abs(nds.xy$y) # abs()
# modify idf of vertex because maybe two identical
grp <- igraph::set.vertex.attribute(grp, "name", value=1:igraph::gorder(grp))
# igraph::as_data_frame(grp, what="vertices")
g.nodes <- igraph::as_data_frame(grp, what="vertices")
g.nodes$y <- offset.img+g.nodes$y # add the offset
common.color <- unique(subset(g.nodes, comm == 1)$color)
# get common nodes (to plot labels)
as <- subset(g.nodes, comm == 1)$idf
nds.lbl <- subset(g.nodes, idf %in% as)
# g.nodes <- cbind(igraph::as_data_frame(grp, what="vertices"),nds.xy) # bind to get coordinates & colors
# graph.j <- edges[edges$site==gA$site & edges$decor==gA$decor,]
g.edges <- cbind(igraph::as_data_frame(grp),eds.xy) # bind to get coordinates & colors
for (edg in 1:nrow(g.edges)){
# edg <- 1
graphics::lines(c(g.edges[edg,"xa"],g.edges[edg,"xb"]),
c(g.edges[edg,"ya"],g.edges[edg,"yb"]),
lwd=g.edges[edg,"width"],col="orange")
}
for (nd in 1:nrow(g.nodes)){
graphics::points(c(g.nodes[nd,"x"]), c(g.nodes[nd,"y"]),
pch=16,cex=g.nodes[nd,"cex"],col=g.nodes[nd,"color"])
}
for (nd.c in 1:nrow(nds.lbl)){
# common nodes (end of common edges)
# label on the node coordinates
labels_shadow(nds.lbl[nd.c,"x"],nds.lbl[nd.c,"y"],
label=nds.lbl[nd.c,var],
col=nds.lbl[nd.c,"color"],
bg="white",
cex=0.4,
r=0.2)
}
}
side_plot_eds <- function(g, idf, doss, var){
# a manner to use only plot()
# idf <- 1 ; var <- "type"
grp <- g[[idf]]
dec.img <- magick::image_read(paste0(doss, "/", grp$img))
# add the decor site and name
dec.img <- magick::image_annotate(dec.img,
paste0(grp$site,"\n",grp$decor),
gravity="northwest",size=20)
drawing.decor <- grDevices::as.raster(dec.img)
graphics::plot(drawing.decor)
offset.img <- dim(drawing.decor)[1] # offset depend on raster size
# points(100,300)
# add all edges
# igraph::as_data_frame(gA)
eds.xy <- read_eds(doss = doss, site = grp$site, decor = grp$decor)
eds.xy$ya <- offset.img+eds.xy$ya # add the offset
eds.xy$yb <- offset.img+eds.xy$yb # add the offset
# eds.xy$ya <- abs(eds.xy$ya) ; eds.xy$yb <- abs(eds.xy$yb) # abs()
nds.xy <- read_nds(doss = getwd(),site = grp$site,decor = grp$decor)
nds.xy$y <- offset.img+nds.xy$y # add the offset
# nds.xy$y <- abs(nds.xy$y) # abs()
g.edges <- cbind(igraph::as_data_frame(grp),eds.xy) # bind to get coordinates & colors
common.color <- unique(subset(g.edges, comm == 1)$color)
# get common nodes (to plot labels)
as <- subset(g.edges, comm == 1)$a ; bs <- subset(g.edges, comm == 1)$b
abs <- sort(unique(c(as,bs)))
nds.lbl <- subset(nds.xy, id %in% abs)
# graph.j <- edges[edges$site==gA$site & edges$decor==gA$decor,]
for (nd in 1:nrow(nds.xy)){
# all nodes
graphics::points(c(nds.xy[nd,]$x), c(nds.xy[nd,]$y),
pch=16,cex=0.5,col="orange")
}
for (edg in 1:nrow(g.edges)){
# all edges
# edg <- 1
graphics::lines(c(g.edges[edg,"xa"],g.edges[edg,"xb"]),
c(g.edges[edg,"ya"],g.edges[edg,"yb"]),
lwd=g.edges[edg,"width"],col=g.edges[edg,"color"])
}
for (nd.c in 1:nrow(nds.lbl)){
# common nodes (end of common edges)
# label on the node coordinates
labels_shadow(nds.lbl[nd.c,]$x,nds.lbl[nd.c,]$y,
label=as.character(nds.lbl[nd.c,var]),
col=common.color,
bg="white",
cex=0.4,
r=0.2)
}
}
plot_eds_compar <- function(listg, graph2, doss=getwd(), var="type"){
# a manner to use only plot()
# listg <- g.compar ; graph2 <- c(1,4) ; var="type"
# get row index in tcompar
flistg <- unlist(listg, recursive = FALSE) # flatten list
lidf <- unique(unlist(lapply(flistg, function(x) x$name)))
ldec.comp <- t(utils::combn(lidf, 2)) # all pairwise comparisons
A <- graph2[1] ; B <- graph2[2] # ; nb.comm.eds <-
ridx <- which(ldec.comp[,1] == A & ldec.comp[,2] == B, arr.ind = T)
g <- listg[[ridx]]
out.compar <- paste0("compar_eds_",as.character(A),"_",as.character(B),".png")
tit <- paste0("compare decorations '",A,"' and '",B,"' on '",var,"'")
grDevices::png(out.compar,width = 14,height=7, units = "cm", res=300)
graphics::par(mfrow=c(1,2),
mar=c(0,0,0,0))    # set the plotting area into a 1*2 array
side_plot_eds(g, 1, doss, var); side_plot_eds(g, 2, doss, var) # call to plot
graphics::mtext(tit, side = 1, line = -1, outer = TRUE, cex=0.8)
grDevices::dev.off()
print(getwd())
# shell.exec(out.compar)
}
plot_eds_compar(g.compar, c(1,4), doss = system.file("extdata", package = "decorr"))
side_plot_eds(g, 1, doss, var)
grp <- g[[idf]]
dec.img <- magick::image_read(paste0(doss, "/", grp$img))
# add the decor site and name
dec.img <- magick::image_annotate(dec.img,
paste0(grp$site,"\n",grp$decor),
gravity="northwest",size=20)
drawing.decor <- grDevices::as.raster(dec.img)
graphics::plot(drawing.decor)
offset.img <- dim(drawing.decor)[1] # offset depend on raster size
# points(100,300)
# add all edges
# igraph::as_data_frame(gA)
eds.xy <- read_eds(doss = doss, site = grp$site, decor = grp$decor)
eds.xy$ya <- offset.img+eds.xy$ya # add the offset
eds.xy$yb <- offset.img+eds.xy$yb # add the offset
# eds.xy$ya <- abs(eds.xy$ya) ; eds.xy$yb <- abs(eds.xy$yb) # abs()
nds.xy <- read_nds(doss = getwd(),site = grp$site,decor = grp$decor)
nds.xy$y <- offset.img+nds.xy$y # add the offset
# nds.xy$y <- abs(nds.xy$y) # abs()
g.edges <- cbind(igraph::as_data_frame(grp),eds.xy) # bind to get coordinates & colors
common.color <- unique(subset(g.edges, comm == 1)$color)
# get common nodes (to plot labels)
as <- subset(g.edges, comm == 1)$a ; bs <- subset(g.edges, comm == 1)$b
abs <- sort(unique(c(as,bs)))
nds.lbl <- subset(nds.xy, id %in% abs)
nds.xy <- read_nds(doss = getwd(),site = grp$site,decor = grp$decor)
side_plot_nds <- function(g, idf, doss, var){
# a manner to use only plot()
# idf <- 1 ; var <- "type"
grp <- g[[idf]]
dec.img <- magick::image_read(paste0(doss, "/", grp$img))
# add the decor site and name
dec.img <- magick::image_annotate(dec.img,
paste0(grp$site,"\n",grp$decor),
gravity="northwest",size=20)
drawing.decor <- grDevices::as.raster(dec.img)
graphics::plot(drawing.decor)
offset.img <- dim(drawing.decor)[1] # offset depend on raster size
# points(100,300)
# add all edges
# igraph::as_data_frame(gA)
eds.xy <- read_eds(doss = doss, site = grp$site, decor = grp$decor)
eds.xy$ya <- offset.img+eds.xy$ya # add the offset
eds.xy$yb <- offset.img+eds.xy$yb # add the offset
# eds.xy$ya <- abs(eds.xy$ya) ; eds.xy$yb <- abs(eds.xy$yb) # abs()
nds.xy <- read_nds(doss = doss, site = grp$site, decor = grp$decor)
nds.xy$y <- offset.img+nds.xy$y # add the offset
# nds.xy$y <- abs(nds.xy$y) # abs()
# modify idf of vertex because maybe two identical
grp <- igraph::set.vertex.attribute(grp, "name", value=1:igraph::gorder(grp))
# igraph::as_data_frame(grp, what="vertices")
g.nodes <- igraph::as_data_frame(grp, what="vertices")
g.nodes$y <- offset.img+g.nodes$y # add the offset
common.color <- unique(subset(g.nodes, comm == 1)$color)
# get common nodes (to plot labels)
as <- subset(g.nodes, comm == 1)$idf
nds.lbl <- subset(g.nodes, idf %in% as)
# g.nodes <- cbind(igraph::as_data_frame(grp, what="vertices"),nds.xy) # bind to get coordinates & colors
# graph.j <- edges[edges$site==gA$site & edges$decor==gA$decor,]
g.edges <- cbind(igraph::as_data_frame(grp),eds.xy) # bind to get coordinates & colors
for (edg in 1:nrow(g.edges)){
# edg <- 1
graphics::lines(c(g.edges[edg,"xa"],g.edges[edg,"xb"]),
c(g.edges[edg,"ya"],g.edges[edg,"yb"]),
lwd=g.edges[edg,"width"],col="orange")
}
for (nd in 1:nrow(g.nodes)){
graphics::points(c(g.nodes[nd,"x"]), c(g.nodes[nd,"y"]),
pch=16,cex=g.nodes[nd,"cex"],col=g.nodes[nd,"color"])
}
for (nd.c in 1:nrow(nds.lbl)){
# common nodes (end of common edges)
# label on the node coordinates
labels_shadow(nds.lbl[nd.c,"x"],nds.lbl[nd.c,"y"],
label=nds.lbl[nd.c,var],
col=nds.lbl[nd.c,"color"],
bg="white",
cex=0.4,
r=0.2)
}
}
side_plot_eds <- function(g, idf, doss, var){
# a manner to use only plot()
# idf <- 1 ; var <- "type"
grp <- g[[idf]]
dec.img <- magick::image_read(paste0(doss, "/", grp$img))
# add the decor site and name
dec.img <- magick::image_annotate(dec.img,
paste0(grp$site,"\n",grp$decor),
gravity="northwest",size=20)
drawing.decor <- grDevices::as.raster(dec.img)
graphics::plot(drawing.decor)
offset.img <- dim(drawing.decor)[1] # offset depend on raster size
# points(100,300)
# add all edges
# igraph::as_data_frame(gA)
eds.xy <- read_eds(doss = doss, site = grp$site, decor = grp$decor)
eds.xy$ya <- offset.img+eds.xy$ya # add the offset
eds.xy$yb <- offset.img+eds.xy$yb # add the offset
# eds.xy$ya <- abs(eds.xy$ya) ; eds.xy$yb <- abs(eds.xy$yb) # abs()
nds.xy <- read_nds(doss = doss, site = grp$site, decor = grp$decor)
nds.xy$y <- offset.img+nds.xy$y # add the offset
# nds.xy$y <- abs(nds.xy$y) # abs()
g.edges <- cbind(igraph::as_data_frame(grp),eds.xy) # bind to get coordinates & colors
common.color <- unique(subset(g.edges, comm == 1)$color)
# get common nodes (to plot labels)
as <- subset(g.edges, comm == 1)$a ; bs <- subset(g.edges, comm == 1)$b
abs <- sort(unique(c(as,bs)))
nds.lbl <- subset(nds.xy, id %in% abs)
# graph.j <- edges[edges$site==gA$site & edges$decor==gA$decor,]
for (nd in 1:nrow(nds.xy)){
# all nodes
graphics::points(c(nds.xy[nd,]$x), c(nds.xy[nd,]$y),
pch=16,cex=0.5,col="orange")
}
for (edg in 1:nrow(g.edges)){
# all edges
# edg <- 1
graphics::lines(c(g.edges[edg,"xa"],g.edges[edg,"xb"]),
c(g.edges[edg,"ya"],g.edges[edg,"yb"]),
lwd=g.edges[edg,"width"],col=g.edges[edg,"color"])
}
for (nd.c in 1:nrow(nds.lbl)){
# common nodes (end of common edges)
# label on the node coordinates
labels_shadow(nds.lbl[nd.c,]$x,nds.lbl[nd.c,]$y,
label=as.character(nds.lbl[nd.c,var]),
col=common.color,
bg="white",
cex=0.4,
r=0.2)
}
}
plot_eds_compar <- function(listg, graph2, doss=getwd(), var="type"){
# a manner to use only plot()
# listg <- g.compar ; graph2 <- c(1,4) ; var="type"
# get row index in tcompar
flistg <- unlist(listg, recursive = FALSE) # flatten list
lidf <- unique(unlist(lapply(flistg, function(x) x$name)))
ldec.comp <- t(utils::combn(lidf, 2)) # all pairwise comparisons
A <- graph2[1] ; B <- graph2[2] # ; nb.comm.eds <-
ridx <- which(ldec.comp[,1] == A & ldec.comp[,2] == B, arr.ind = T)
g <- listg[[ridx]]
out.compar <- paste0("compar_eds_",as.character(A),"_",as.character(B),".png")
tit <- paste0("compare decorations '",A,"' and '",B,"' on '",var,"'")
grDevices::png(out.compar,width = 14,height=7, units = "cm", res=300)
graphics::par(mfrow=c(1,2),
mar=c(0,0,0,0))    # set the plotting area into a 1*2 array
side_plot_eds(g, 1, doss, var); side_plot_eds(g, 2, doss, var) # call to plot
graphics::mtext(tit, side = 1, line = -1, outer = TRUE, cex=0.8)
grDevices::dev.off()
print(getwd())
# shell.exec(out.compar)
}
plot_eds_compar(g.compar, c(1,4), doss = system.file("extdata", package = "decorr"))
remove.packages("decorr", lib="~/R/win-library/3.6")
rm(list=ls()) # remove all Globs var
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
.rs.restartR() # uninstall & restart session
devtools::install_github("zoometh/iconr")
devtools::install_github("zoometh/iconr")
devtools::install_github("zoometh/iconr")
devtools::install_github("zoometh/iconr")
devtools::install_github("zoometh/iconr")
devtools::install_github("zoometh/iconr")
devtools::install_github("zoometh/iconr")
library(decorr)
library(decorr)
remove.packages("decorr", lib="~/R/win-library/3.6")
# remove.packages("reshape", lib="~/R/win-library/3.6")
rm(list=ls()) # remove all Globs var
.rs.restartR() # uninstall & restart session
devtools::install_github("zoometh/iconr")
library(decorr)
plot_eds_compar(g.compar, c(1,4), doss = system.file("extdata", package = "decorr"))
g.compar <- list_eds_compar(lgrph,"type")
plot_eds_compar(g.compar, c(1,4), doss = system.file("extdata", package = "decorr"))
g.compar <- list_eds_compar(lgrph,"type")
lgrph <- decorr::list_dec(imgs,nodes,edges,var="type")
imgs <- read.table(system.file("extdata", "imgs.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
nodes <- read.table(system.file("extdata", "nodes.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
edges <- read.table(system.file("extdata", "edges.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
lgrph <- decorr::list_dec(imgs,nodes,edges,var="type")
g.compar <- list_eds_compar(lgrph,"type")
plot_eds_compar(g.compar, c(1,4), doss = system.file("extdata", package = "decorr"))
plot_eds_compar(g.compar, c(1,4), doss = system.file("extdata", package = "decorr"))
plot_eds_compar(g.compar, c(2,4), doss = system.file("extdata", package = "decorr"))
getwd()
getwd()
remove.packages("decorr", lib="~/R/win-library/3.6")
# remove.packages("reshape", lib="~/R/win-library/3.6")
rm(list=ls()) # remove all Globs var
.rs.restartR() # uninstall & restart session
devtools::install_github("zoometh/iconr")
devtools::install_github("zoometh/iconr")
(g.compar, c(2,4), doss = system.file("extdata", package = "decorr"))
plot_eds_compar(g.compar, c(2,4), doss = system.file("extdata", package = "decorr"))
imgs <- read.table(system.file("extdata", "imgs.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
nodes <- read.table(system.file("extdata", "nodes.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
edges <- read.table(system.file("extdata", "edges.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
lgrph <- decorr::list_dec(imgs,nodes,edges,var="type")
g.compar <- list_eds_compar(lgrph,"type")
plot_eds_compar(g.compar, c(2,4), doss = system.file("extdata", package = "decorr"))
library(decorr)
imgs <- read.table(system.file("extdata", "imgs.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
nodes <- read.table(system.file("extdata", "nodes.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
edges <- read.table(system.file("extdata", "edges.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
lgrph <- decorr::list_dec(imgs,nodes,edges,var="type")
g.compar <- list_eds_compar(lgrph,"type")
plot_eds_compar(g.compar, c(2,4), doss = system.file("extdata", package = "decorr"))
plot_eds_compar <- function(listg, graph2, doss=getwd(), var="type"){
# a manner to use only plot()
# listg <- g.compar ; graph2 <- c(1,4) ; var="type"
# get row index in tcompar
flistg <- unlist(listg, recursive = FALSE) # flatten list
lidf <- unique(unlist(lapply(flistg, function(x) x$name)))
ldec.comp <- t(utils::combn(lidf, 2)) # all pairwise comparisons
A <- graph2[1] ; B <- graph2[2] # ; nb.comm.eds <-
ridx <- which(ldec.comp[,1] == A & ldec.comp[,2] == B, arr.ind = T)
g <- listg[[ridx]]
out.compar <- paste0("compar_eds_",as.character(A),"_",as.character(B),".png")
tit <- paste0("compare decorations '",A,"' and '",B,"' on '",var,"'")
grDevices::png(out.compar,width = 14,height=7, units = "cm", res=300)
graphics::par(mfrow=c(1,2),
mar=c(0,0,0,0))    # set the plotting area into a 1*2 array
side_plot_eds(g, 1, doss, var); side_plot_eds(g, 2, doss, var) # call to plot
graphics::mtext(tit, side = 1, line = -1, outer = TRUE, cex=0.8)
grDevices::dev.off()
return(paste0(doss,"/",out.compar,".png"))
}
remove.packages("decorr", lib="~/R/win-library/3.6")
# remove.packages("reshape", lib="~/R/win-library/3.6")
rm(list=ls()) # remove all Globs var
.rs.restartR() # uninstall & restart session
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
# unload all packages
devtools::install_github("zoometh/iconr")
g.compar <- list_eds_compar(lgrph,"type")
eds_compar <- plot_eds_compar(g.compar, c(1,4), doss = system.file("extdata", package = "decorr"))
print(eds_compar)
@
library(decorr)
imgs <- read.table(system.file("extdata", "imgs.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
nodes <- read.table(system.file("extdata", "nodes.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
edges <- read.table(system.file("extdata", "edges.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
lgrph <- decorr::list_dec(imgs,nodes,edges,var="type")
g.compar <- list_eds_compar(lgrph,"type")
eds_compar <- plot_eds_compar(g.compar, c(1,4), doss = system.file("extdata", package = "decorr"))
eds_compar
eds_compar <- plot_eds_compar(g.compar, c(3,4), doss = system.file("extdata", package = "decorr"))
g.compar
eds_compar
dirname(sys.frame(1)$ofile)
dirname(sys.frame()$ofile)
initial.options <- commandArgs(trailingOnly = FALSE)
file.arg.name <- "--file="
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
script.basename <- dirname(script.name)
other.name <- file.path(script.basename, "other.R")
print(paste("Sourcing",other.name,"from",script.name))
source(other.name)
getwd()
remove.packages("decorr", lib="~/R/win-library/3.6")
# remove.packages("reshape", lib="~/R/win-library/3.6")
rm(list=ls()) # remove all Globs var
.rs.restartR() # uninstall & restart session
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
# unload all packages
devtools::install_github("zoometh/iconr")
eds_compar
library(decorr)
imgs <- read.table(system.file("extdata", "imgs.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
nodes <- read.table(system.file("extdata", "nodes.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
edges <- read.table(system.file("extdata", "edges.csv", package = "decorr"),
sep="\t",stringsAsFactors = FALSE)
lgrph <- decorr::list_dec(imgs,nodes,edges,var="type")
g.compar <- list_eds_compar(lgrph,"type")
eds_compar <- plot_eds_compar(g.compar, c(3,4), doss = system.file("extdata", package = "decorr"))
print(eds_compar)
plot(image_read(eds_compar))
plot(eds_compar)
df.same_edges <- same_eds(lgrph,"type")
print(xtable::xtable(df.same_edges,
caption="same edges",
label="Test_table_2",
size=7,
digits=c(0)),
include.rownames=TRUE)
