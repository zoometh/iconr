tdf.agg <- as.data.frame(t(df.agg))
colnames(tdf.agg) <- tdf.agg[1, ] # colnames = decorations
tdf.agg <- tdf.agg[-1, ]
# tdf.agg[, 1:ncol(tdf.agg)] <- sapply(tdf.agg[, 1:ncol(tdf.agg)], as.numeric) # character -> num
tdf.agg[, 1:ncol(tdf.agg)] <- lapply(tdf.agg[, 1:ncol(tdf.agg)], as.numeric)
# sapply(tdf.agg, class)
ldecors <- sapply(strsplit(rownames(tdf.agg), "\\."), "[[", 2)
tdf.agg$dec <- ldecors
tdf.agg <- stats::aggregate(tdf.agg[, 1:ncol(tdf.agg)-1], list(tdf.agg$dec), mean)
rownames(tdf.agg) <- tdf.agg[, 1] # rownames = decorations
tdf.agg <- tdf.agg[ , -1]
diag(tdf.agg) <- 0
ldist.type[[length(ldist.type)+1]] <- tdf.agg # add to list
length(ldist.type)
seq(1, length(ldist.type))
ldecors <- unlist(lapply(strsplit(rownames(tdf.agg), "\\."), function(x) x[[2]]))
ldecors <- sapply(strsplit(rownames(tdf.agg), "\\."), "[[", 2)
ldist.type <- list()
a.type.name <- unique(nodes$type)[a.type] # TODO: improve type identification
print(paste("*read distance matrix of ", a.type.name))
a.dist <- unlist(ldist[[a.type]])
df <- as.data.frame(as.matrix(a.dist))
ldecors <- unlist(lapply(strsplit(rownames(df), "\\."), function(x) x[[2]]))
# ldecors <- sapply(strsplit(rownames(df), "\\."), "[[", 2)
df$dec <- ldecors
df.agg <- stats::aggregate(df[, 1:ncol(df)-1], list(df$dec), mean)
tdf.agg <- as.data.frame(t(df.agg))
colnames(tdf.agg) <- tdf.agg[1, ] # colnames = decorations
tdf.agg <- tdf.agg[-1, ]
# tdf.agg[, 1:ncol(tdf.agg)] <- sapply(tdf.agg[, 1:ncol(tdf.agg)], as.numeric) # character -> num
tdf.agg[, 1:ncol(tdf.agg)] <- lapply(tdf.agg[, 1:ncol(tdf.agg)], as.numeric)
# sapply(tdf.agg, class)
ldecors <- sapply(strsplit(rownames(tdf.agg), "\\."), "[[", 2)
ldecors
ldecors <- unlist(lapply(strsplit(rownames(tdf.agg), "\\."), function(x) x[[2]]))
ldecors
goodpractice::gp()
devtools::check(cran = T)
devtools::check(cran = T)
# library(iconr)
library(igraph)
library(dplyr)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(
collapse = TRUE,
comment = ">",
fig.pos = 'H'
)
# ibahernando.path <- paste0(getwd(),"/img/ibahernando_256colours.png")
# brozas.path <- paste0(getwd(),"/img/brozas_256colours.png")
# solanas.path <- paste0(getwd(),"/img/solana_detail_256colours.png")
# solanas.vor.path <- paste0(getwd(),"/img/solana_voronoi_256colours.png")
# ibahernando.path <- "img/ibahernando_256colours.png"
# brozas.path <- "img/brozas_256colours.png"
# solanas.path <- "img/solana_detail_256colours.png"
# solanas.vor.path <- "img/solana_voronoi_256colours.png"
ibahernando.path <- "../doc/img/ibahernando_256colours.png"
brozas.path <- "../doc/img/brozas_256colours.png"
solanas.path <- "../doc/img/solana_detail_256colours.png"
solanas.vor.path <- "../doc/img/solana_voronoi_256colours.png"
library(iconr)
dataDir <- system.file("extdata", package = "iconr")
input.files <- list.files(dataDir)
cat(input.files, sep="\n")
imgs_path <- paste0(dataDir, "/imgs.csv")
imgs <- read.table(imgs_path, sep=";", stringsAsFactors = FALSE)
nodes_path <- paste0(dataDir, "/nodes.shp")
nodes.shp <- rgdal::readOGR(dsn = nodes_path, verbose = FALSE)
nodes <- as.data.frame(nodes.shp)
edges_path <- paste0(dataDir, "/edges.shp")
edges.shp <- rgdal::readOGR(dsn = edges_path, verbose = FALSE)
edges <- as.data.frame(edges.shp)
nodes_path <- paste0(dataDir, "/nodes.tsv")
nodes <- read.table(nodes_path, sep="\t", stringsAsFactors = FALSE)
edges_path <- paste0(dataDir, "/edges.tsv")
edges <- read.table(edges_path, sep="\t", stringsAsFactors = FALSE)
lgrph <- list_dec(imgs, nodes, edges)
g <- lgrph[[1]]
as.character(class(g))
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
par(mar=c(1, 0, 2, 0), mfrow=c(1, 2), cex.main = 0.9, font.main = 1)
coords <- layout.fruchterman.reingold(lgrph[[1]])
plot(g,
vertex.size = 15,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Graph drawing based on x, y coordinates"
)
plot(g,
layout = layout.fruchterman.reingold(g),
vertex.size = 5 + degree(g)*10,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Force-directed graph drawing,\nwith degree-dependent node size."
)
mtext(g$decor, cex = 1, side = 1, line = -1, outer = TRUE)
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
par(mar=c(1, 0, 2, 0), mfrow=c(1, 2), cex.main = 0.9, font.main = 1)
coords <- layout.fruchterman.reingold(lgrph[[1]])
plot(g,
vertex.size = 15,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Graph drawing based on x, y coordinates"
)
plot(g,
layout = layout.fruchterman.reingold(g),
vertex.size = 5 + degree(g)*10,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Force-directed graph drawing,\nwith degree-dependent node size."
)
mtext(g$decor, cex = 1, side = 1, line = -1, outer = TRUE)
nodes_path <- paste0(dataDir, "/nodes.shp")
nodes.shp <- rgdal::readOGR(dsn = nodes_path, verbose = FALSE)
nodes <- as.data.frame(nodes.shp)
edges_path <- paste0(dataDir, "/edges.shp")
edges.shp <- rgdal::readOGR(dsn = edges_path, verbose = FALSE)
edges <- as.data.frame(edges.shp)
edges
nodes_path <- paste0(dataDir, "/nodes.tsv")
nodes <- read.table(nodes_path, sep="\t", stringsAsFactors = FALSE)
edges_path <- paste0(dataDir, "/edges.tsv")
edges <- read.table(edges_path, sep="\t", stringsAsFactors = FALSE)
lgrph <- list_dec(imgs, nodes, edges)
g <- lgrph[[1]]
as.character(class(g))
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
par(mar=c(1, 0, 2, 0), mfrow=c(1, 2), cex.main = 0.9, font.main = 1)
coords <- layout.fruchterman.reingold(lgrph[[1]])
plot(g,
vertex.size = 15,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Graph drawing based on x, y coordinates"
)
g
lgrph <- list_dec(imgs, nodes, edges)
lgrph
plot(lgrph[[2]])
imgs
nodes
edges
devtools::check(cran = T)
named_elements(lgrph[[1]], focus = "edges", nd.var="type")[1]
# library(iconr)
library(igraph)
library(dplyr)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(
collapse = TRUE,
comment = ">",
fig.pos = 'H'
)
# ibahernando.path <- paste0(getwd(),"/img/ibahernando_256colours.png")
# brozas.path <- paste0(getwd(),"/img/brozas_256colours.png")
# solanas.path <- paste0(getwd(),"/img/solana_detail_256colours.png")
# solanas.vor.path <- paste0(getwd(),"/img/solana_voronoi_256colours.png")
# ibahernando.path <- "img/ibahernando_256colours.png"
# brozas.path <- "img/brozas_256colours.png"
# solanas.path <- "img/solana_detail_256colours.png"
# solanas.vor.path <- "img/solana_voronoi_256colours.png"
ibahernando.path <- "../doc/img/ibahernando_256colours.png"
brozas.path <- "../doc/img/brozas_256colours.png"
solanas.path <- "../doc/img/solana_detail_256colours.png"
solanas.vor.path <- "../doc/img/solana_voronoi_256colours.png"
library(iconr)
dataDir <- system.file("extdata", package = "iconr")
input.files <- list.files(dataDir)
cat(input.files, sep="\n")
imgs_path <- paste0(dataDir, "/imgs.csv")
imgs <- read.table(imgs_path, sep=";", stringsAsFactors = FALSE)
nodes_path <- paste0(dataDir, "/nodes.shp")
nodes.shp <- rgdal::readOGR(dsn = nodes_path, verbose = FALSE)
nodes <- as.data.frame(nodes.shp)
edges_path <- paste0(dataDir, "/edges.shp")
edges.shp <- rgdal::readOGR(dsn = edges_path, verbose = FALSE)
edges <- as.data.frame(edges.shp)
nodes_path <- paste0(dataDir, "/nodes.tsv")
nodes <- read.table(nodes_path, sep="\t", stringsAsFactors = FALSE)
edges_path <- paste0(dataDir, "/edges.tsv")
edges <- read.table(edges_path, sep="\t", stringsAsFactors = FALSE)
lgrph <- list_dec(imgs, nodes, edges)
g <- lgrph[[1]]
as.character(class(g))
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
par(mar=c(1, 0, 2, 0), mfrow=c(1, 2), cex.main = 0.9, font.main = 1)
coords <- layout.fruchterman.reingold(lgrph[[1]])
plot(g,
vertex.size = 15,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Graph drawing based on x, y coordinates"
)
plot(g,
layout = layout.fruchterman.reingold(g),
vertex.size = 5 + degree(g)*10,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Force-directed graph drawing,\nwith degree-dependent node size."
)
mtext(g$decor, cex = 1, side = 1, line = -1, outer = TRUE)
imgs_path <- paste0(dataDir, "/imgs.tsv")
imgs <- read.table(imgs_path, sep="\t", stringsAsFactors = FALSE)
knitr::kable(imgs, "html") %>%
kableExtra::kable_styling(full_width = FALSE, position = "center", font_size=12)
df.equi <- data.frame(
"Device/Package" = c("*R graphics*", "*R raster*", "*R magick*", "***GIS interface***"),
"Unit of measure" = c("number of pixels", "number of pixels", "number of pixels", "**number of pixels**"),
"Origin" = c("bottom-left corner", "top-left corner", "top-left corner", "**top-left corner**"),
"x-axis orientation" = c("rightward", "downward", "rightward", "**rightward**"),
"y-axis orientation" = c("upward", "rightward", "downward", "**upward**"),
check.names = FALSE)
knitr::kable(df.equi) %>%
kable_styling(full_width = F)
library(magick)
library(graphics)
dataDir <- system.file("extdata", package = "iconr")
imgs_path <- paste0(dataDir, "/imgs.csv")
imgs <- read.table(imgs_path, sep=";", stringsAsFactors = FALSE)
cm1 <- image_read(paste0(dataDir, "/", imgs$img[1]))
W <- image_info(cm1)$width
H <- image_info(cm1)$height
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
par(mar = c(0, 0, 0, 0))
plot(cm1)
box(lwd = 2)
text(0, H, paste0(0, ",", 0), cex = 2, adj = c(0, 1.1))
text(W, H, paste0(W, ",", 0), cex = 2, adj = c(1, 1.1))
text(0, 0, paste0(0, ",", -H), cex = 2, adj = c(0, -0.2))
text(W, 0, paste0(W, ",", -H), cex = 2, adj = c(1, -0.2))
nds.df <- read_nds(site = "Cerro Muriano", decor = "Cerro Muriano 1", dir = dataDir)
knitr::kable(nds.df, "html") %>%
kableExtra::kable_styling(full_width = FALSE, position = "center", font_size=12)
edges <- read.table(edges_path, sep = "\t", stringsAsFactors = FALSE)
knitr::kable(head(edges), "html", align = "llccc") %>%
kableExtra::kable_styling(full_width = FALSE, position = "center",
font_size=12) %>%
gsub("\\+", "$+$", .)
eds.df <- read_eds(site = "Cerro Muriano", decor = "Cerro Muriano 1", dir = dataDir)
knitr::kable(head(eds.df), "html", align = "llcccrrrr") %>%
kableExtra::kable_styling(full_width = FALSE, position = "center", font_size=12) %>%
gsub("\\+", "$+$", .)
named_elements(lgrph[[4]], focus = "edges", nd.var="type")
named_elements(lgrph[[1]], focus = "edges", nd.var="type")[1]
eds.df <- read_eds(site = "Cerro Muriano", decor = "Cerro Muriano 1", dir = dataDir)
knitr::kable(head(eds.df), "html", align = "llcccrrrr") %>%
kableExtra::kable_styling(full_width = FALSE, position = "center", font_size=12) %>%
gsub("\\+", "$+$", .)
lgrph[[1]]
plot(lgrph[[1]])
?named_elements
# Read data
imgs <- read.table(system.file("extdata", "imgs.tsv", package = "iconr"),
sep="\t", stringsAsFactors = FALSE)
nodes <- read.table(system.file("extdata", "nodes.tsv", package = "iconr"),
sep="\t", stringsAsFactors = FALSE)
edges <- read.table(system.file("extdata", "edges.tsv", package = "iconr"),
sep="\t", stringsAsFactors = FALSE)
lgrph <- list_dec(imgs, nodes, edges)
named_elements(lgrph[[2]], focus = "edges", nd.var="type")
lgrph[[1]]
lgrph[[1]]
plot(lgrph[[1]])
g <- lgrph[[1]]
print(g)
V(g)
imgs
nodes
edges
focus = "edges"
nd.var = "type"
disamb.marker = "#"
focus == "edges"
grph.eds <- igraph::as_data_frame(grph)[, c("from", "type", "to")]
seq_len(nrow(imgs))
r <- 1
a.enr <- imgs[r, ]
g.nodes <- nodes[nodes$site == a.enr$site & nodes$decor == a.enr$decor,
! (names(nodes) %in% c("site", "decor"))]
g.edges <- edges[edges$site == a.enr$site & edges$decor == a.enr$decor,
! (names(edges) %in% c("site", "decor"))]
# create graph
g <- igraph::graph_from_data_frame(g.edges, directed = FALSE,
vertices = g.nodes)
plot(g)
nodes$site
imgs <- read.table(system.file("extdata", "imgs.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
nodes <- read.table(system.file("extdata", "nodes.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
edges <- read.table(system.file("extdata", "edges.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
nodes$site
a.enr <- imgs[r, ]
g.nodes <- nodes[nodes$site == a.enr$site & nodes$decor == a.enr$decor,
! (names(nodes) %in% c("site", "decor"))]
g.edges <- edges[edges$site == a.enr$site & edges$decor == a.enr$decor,
! (names(edges) %in% c("site", "decor"))]
# create graph
g <- igraph::graph_from_data_frame(g.edges, directed = FALSE,
vertices = g.nodes)
plot(g)
lgrph <- list_dec(imgs, nodes, edges)
plot(lgrph[[1]])
plot(lgrph[[2]])
plot(lgrph[[3]])
named_elements(lgrph[[2]], focus = "edges", nd.var="type")
sort(named_elements(lgrph[[4]], focus = "edges", nd.var = "type"))
named_elements(lgrph[[4]], focus = "edges", nd.var="type")
devtools::check(cran = T)
named_elements(lgrph[[1]], focus = "edges", nd.var = "type")[1]
devtools::check(cran = T)
imgs_path <- paste0(dataDir, "/imgs.tsv")
nodes_path <- paste0(dataDir, "/nodes.tsv")
edges_path <- paste0(dataDir, "/edges.tsv")
imgs_path <- paste0(dataDir, "/imgs.tsv")
nodes_path <- paste0(dataDir, "/nodes.tsv")
edges_path <- paste0(dataDir, "/edges.tsv")
imgs <- read.table(imgs_path, sep="\t", stringsAsFactors = FALSE)
nodes <- read.table(nodes_path, sep="\t", stringsAsFactors = FALSE)
edges <- read.table(edges_path, sep="\t", stringsAsFactors = FALSE)
lgrph <- list_dec(imgs, nodes, edges)
df.same_nodes <- same_elements(lgrph,
focus = "nodes",
nd.var = "type")
diag(df.same_nodes) <- cell_spec(diag(df.same_nodes),
font_size = 9)
knitr::kable(df.same_nodes, row.names = TRUE, escape = FALSE, table.attr = "style='width:30%;'",
caption = "Count of common nodes between decorations") %>%
column_spec(1, bold=TRUE) %>%
kableExtra::kable_styling(position = "center", font_size = 12)
df.same_nodes
diag(df.same_nodes)
knitr::kable(df.same_nodes, row.names = TRUE, escape = FALSE, table.attr = "style='width:30%;'",
caption = "Count of common nodes between decorations")
df.same_nodes
imgs_path <- paste0(dataDir, "/imgs.tsv")
nodes_path <- paste0(dataDir, "/nodes.tsv")
edges_path <- paste0(dataDir, "/edges.tsv")
imgs <- read.table(imgs_path, sep="\t", stringsAsFactors = FALSE)
nodes <- read.table(nodes_path, sep="\t", stringsAsFactors = FALSE)
edges <- read.table(edges_path, sep="\t", stringsAsFactors = FALSE)
lgrph <- list_dec(imgs, nodes, edges)
df.same_nodes <- same_elements(lgrph,
focus = "nodes",
nd.var = "type")
# diag(df.same_nodes) <- cell_spec(diag(df.same_nodes),
#                                  font_size = 9)
knitr::kable(df.same_nodes, row.names = TRUE, escape = FALSE, table.attr = "style='width:30%;'",
caption = "Count of common nodes between decorations") %>%
column_spec(1, bold=TRUE) %>%
kableExtra::kable_styling(position = "center", font_size = 12)
df.same_nodes
imgs_path <- paste0(dataDir, "/imgs.tsv")
nodes_path <- paste0(dataDir, "/nodes.tsv")
edges_path <- paste0(dataDir, "/edges.tsv")
imgs <- read.table(imgs_path, sep="\t", stringsAsFactors = FALSE)
nodes <- read.table(nodes_path, sep="\t", stringsAsFactors = FALSE)
edges <- read.table(edges_path, sep="\t", stringsAsFactors = FALSE)
lgrph <- list_dec(imgs, nodes, edges)
df.same_nodes <- same_elements(lgrph,
focus = "nodes",
nd.var = "type")
df.same_nodes
dataDir
imgs
plot(lgrph[[1]])
imgs <- read.table(system.file("extdata", "imgs.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
nodes <- read.table(system.file("extdata", "nodes.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
edges <- read.table(system.file("extdata", "edges.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
lgrph <- list_dec(imgs, nodes, edges)
plot(lgrph[[1]])
df.same_nodes <- same_elements(lgrph,
focus = "nodes",
nd.var = "type")
df.same_nodes
imgs <- read.table(system.file("extdata", "imgs.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
nodes <- read.table(system.file("extdata", "nodes.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
edges <- read.table(system.file("extdata", "edges.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
lgrph <- list_dec(imgs, nodes, edges)
df.same_nodes <- same_elements(lgrph,
focus = "nodes",
nd.var = "type")
diag(df.same_nodes) <- cell_spec(diag(df.same_nodes),
font_size = 9)
knitr::kable(df.same_nodes, row.names = TRUE, escape = FALSE, table.attr = "style='width:30%;'",
caption = "Count of common nodes between decorations") %>%
column_spec(1, bold=TRUE) %>%
kableExtra::kable_styling(position = "center", font_size = 12)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
remove.packages("iconr", lib="~/R/win-library/4.1")
devtools::check(cran = T)
devtools::check(cran = T)
dplyr::`%T>%`
magrittr::`%T>%`
?Momocs::PCA
geojson.path = paste0(system.file(package = "eamenaR"),
"/extdata/caravanserail_polygon.geojson")
ea.geojson <- geojsonsf::geojson_sf(geojson.path)
ea.geojson
ea.geojson <- sf::st_read(geojson.path)
ea.geojson.polygon <- ea.geojson[sf::st_geometry_type(ea.geojson$geometry) == "POLYGON" | sf::st_geometry_type(ea.geojson$geometry) == "MULTIPOLYGON", ]
ea.geojson.polygon
devtools::check(cran = T)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::build_vignettes()
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
usethis::use_vignette()
devtools::install("zoometh/iconr", build_vignettes = TRUE)
devtools::install_github("zoometh/iconr", build_vignettes = TRUE)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
?testthat
devtools::check(cran = T)
devtools::check(cran = T)
devtools::build_vignettes()
.Last.error
devtools::build_vignettes()
install_github("zoometh/iconr")
devtools::install_github("zoometh/iconr")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check(cran = T)
devtools::check(cran = T)
R CMD build iconr
devtools::check(cran = T)
remove.packages("iconr", lib="~/R/win-library/4.1")
devtools::install_github("zoometh/iconr")
devtools::check(cran = T)
system.file(package = "eamenaR")
system.file(package = "iconr")
system.file("extdata", package = "iconr")
paste0(system.file(package = "iconr"),
"/extdata/Kfar_Hahoresh/Kfar_Hahoresh.crane_afg_nd_pl.geojson")
devtools::check(cran = T)
Kfar_Hahoresh.crane_afg_nd_pl_polygon.wkt <- conv_geojson_to_wkt()
geojson.path = paste0(system.file(package = "iconr"),
"/extdata/Kfar_Hahoresh/Kfar_Hahoresh.crane_afg_nd_pl.geojson")
dataDir = system.file("extdata", package = "iconr")
out.dirPath <- paste0(dataDir, "/", out.dir)
dir.create(file.path(out.dirPath), showWarnings = FALSE)
out.dir = "_out"
out.dirPath <- paste0(dataDir, "/", out.dir)
dir.create(file.path(out.dirPath), showWarnings = FALSE)
ea.geojson <- sf::st_read(geojson.path)
ea.geojson <- sf::st_read(geojson.path, quiet = TRUE)
ea.geojson.polygon <- ea.geojson[sf::st_geometry_type(ea.geojson$geometry) == "POLYGON" | sf::st_geometry_type(ea.geojson$geometry) == "MULTIPOLYGON", ]
ea.geojson.polygon$geometry <- sf::st_cast(ea.geojson.polygon$geometry, "POLYGON")
ea.geojson.polygon[["EAMENA ID"]]
ea.geojson.polygon
ea.geojson.polygon[['site']]
ea.geojson.polygon[["id"]]
as.data.frame(ea.geojson.polygon)
df <- as.data.frame(ea.geojson.polygon)
out.dirPath <- paste0(dataDir, "/", out.dir)
dir.create(file.path(out.dirPath), showWarnings = FALSE)
ea.geojson <- sf::st_read(geojson.path, quiet = TRUE)
ea.geojson.polygon <- ea.geojson[sf::st_geometry_type(ea.geojson$geometry) == "POLYGON" | sf::st_geometry_type(ea.geojson$geometry) == "MULTIPOLYGON", ]
# all multi
ea.geojson.polygon$geometry <- sf::st_cast(ea.geojson.polygon$geometry, "POLYGON")
# conform to iconr format
df <- as.data.frame(ea.geojson.polygon)
df[['geometry']] <- sf::st_as_text(ea.geojson.polygon$geometry)
# df <- data.frame(site = ea.geojson.polygon[["site"]],
#                  decor = ea.geojson.polygon[['numero']], #rep("crvn", nrow(ea.geojson.polygon)),
#                  id = ea.geojson.polygon[["id"]], # rep(1, nrow(ea.geojson.polygon)),
#                  type = rep("caravanserail", nrow(ea.geojson.polygon)),
#                  technlg = rep("-", nrow(ea.geojson.polygon)),
#                  incmplt = rep(0, nrow(ea.geojson.polygon)),
#                  geometry = sf::st_as_text(ea.geojson.polygon$geometry))
# limit and remove duplicates geometries
# df <- head(df, 50)
# df <- df[!duplicated(df[ , c("site")]),]
nd.df.path <- paste0(out.dirPath, "/nodes.csv")
df
