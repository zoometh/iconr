as.character(geom.wkt$geometry)
# bu[j, "Geometric.Place.Expression"] <- as.character(geom.wkt$geometry)
}
geojsonsf::geojson_wkt(geom)
class(try(geojsonsf::geojson_wkt(geom)))
class(try(geojsonsf::geojson_wkt(geom), silent = T)) == 'try-error'
list_mapping_bu(bu.path = "C:/Rprojects/eamena-arches-dev/data/bulk/bu/v3/",
job = "v3",
job.type = "v3_type",
verb = T,
mapping.file = 'https://docs.google.com/spreadsheets/d/1nXgz98mGOySgc0Q2zIeT1RvHGNl4WRq1Fp9m5qB8g8k/edit#gid=1083097625',
mapping.file.ggsheet = T)
remove.packages("eamenaR", lib="~/R/win-library/4.1")
devtools::install_github("eamena-oxford/eamenaR")
devtools::install_github("zoometh/iconr", build_vignettes=TRUE)
devtools::install_github("zoometh/iconr")
getwd()
setwd("C:/Rprojects/iconr")
devtools::install_github("joeroe/stratigraphr")
library(stratigraphr)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(dplyr)
library(igraph)
library(iconr)
# library(ggdag)
library(tidygraph)
library(ggraph)
library(png)
library(grid)
library(gridExtra)
library(stratigraphr)
ibahernando.path <- "../doc/img/ibahernando_256colours.png"
brozas.path <- "../doc/img/brozas_256colours.png"
dummies.path <- "../doc/img/dummies.png"
ibahernando <-  rasterGrob(as.raster(readPNG(ibahernando.path)), interpolate = FALSE)
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
par(mar=c(0, 0, 0, 0))
g <- graph_from_literal(objects-+weapons,
objects-+personnal_item,
weapons-+offensive_weapons,
weapons-+defensive_weapons,
offensive_weapons-+spear,
offensive_weapons-+sword,
defensive_weapons-+shield,
defensive_weapons-+helmet,
personnal_item-+miror,
personnal_item-+comb)
layout <- layout.reingold.tilford(g)
plot(g,
layout = layout,
vertex.color = "white",
vertex.frame.color = "white",
vertex.size = 20,
vertex.label.cex = 0.7,
vertex.label.color = "black",
vertex.label.family = "sans",
edge.arrow.size = 0.5
)
# library(data.tree)
#
# imgs <- read.table(system.file("extdata", "imgs.csv", package = "iconr"),
#                    sep=";", stringsAsFactors = FALSE)
# nodes <- read.table(system.file("extdata", "nodes.csv", package = "iconr"),
#                     sep=";", stringsAsFactors = FALSE)
# edges <- read.table(system.file("extdata", "edges.csv", package = "iconr"),
#                     sep=";", stringsAsFactors = FALSE)
# lgrph <- list_dec(imgs, nodes, edges)
# edges.iba <- igraph::as_data_frame(lgrph[[5]], what="edges")
# overlap.nodes <- unique(edges.iba[edges.iba$type == ">", "from"])
# contemp.nodes <- unique(unlist(edges.iba[edges.iba$type == "=", c("from", "to")]))
# df.stratig <- data.frame(over = rep(overlap.nodes, length(contemp.nodes)),
#                          under = contemp.nodes)
# df.stratig$pathString <- paste(lgrph[[5]]$decor,
#                                df.stratig$over,
#                                df.stratig$under,
#                                sep = "/")
# # superpo <- as.Node(df.stratig)
# # print(superpo)
# gd <- graph_from_data_frame(df.stratig, directed = TRUE, vertices = NULL)
# gd.ed <- as_data_frame(gd, what="edges")
# gd.nd <- as_data_frame(gd, what="vertices")
# rstat_nodes <- data.frame(name = gd.nd)
# rstat_edges <- data.frame(from = gd.ed$from,
#                           to = gd.ed$to)
# # rstat_nodes <- data.frame(name = c("Hadley", "David", "Romain", "Julia"))
# # rstat_edges <- data.frame(from = c(1, 1, 1, 2, 3, 3, 4, 4, 4),
# #                           to = c(2, 3, 4, 1, 1, 2, 1, 2, 3))
# gd.all <- tbl_graph(nodes = rstat_nodes, edges = rstat_edges)
# gd.all <- set.vertex.attribute(gd.all, "context", value=as.character(V(gd.all)))
imgs <- read.table(system.file("extdata", "imgs.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
nodes <- read.table(system.file("extdata", "nodes.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
edges <- read.table(system.file("extdata", "edges.csv", package = "iconr"),
sep=";", stringsAsFactors = FALSE)
lgrph <- list_dec(imgs, nodes, edges)
# edges
edges.iba <- igraph::as_data_frame(lgrph[[5]], what="edges")
over.edges <- edges.iba[edges.iba[, "type"] == ">", ]
contemp.edges <- edges.iba[edges.iba[, "type"] == "=", ]
# nodes
nodes.iba <- igraph::as_data_frame(lgrph[[5]], what="vertices")
tib.gd.nd <- as_tibble(nodes.iba) # convert nodes df to tibble
tib.gd.nd$context <- tib.gd.nd$name # the "context"
# prepare the df
tib.gd.nd$above <- tib.gd.nd$below <- tib.gd.nd$equal <- NA
class(tib.gd.nd$above) <- class(tib.gd.nd$below) <- class(tib.gd.nd$equal) <- "list" # change class
tib.gd.nd$name <- tib.gd.nd$x <- tib.gd.nd$y <- tib.gd.nd$type <- NULL
# OVER
for(n in tib.gd.nd$context){
# filter for each nodes
n.is.above <- over.edges[over.edges[, "from"] == n, ]
if (nrow(n.is.above) > 0){
tib.gd.nd[n , "below"][[1]] <- list(n.is.above[, "to"])
}
n.is.below <- over.edges[over.edges[, "to"] == n, ]
if (nrow(n.is.below) > 0){
tib.gd.nd[n , "above"][[1]] <- list(n.is.below[, "from"])
}
n.is.contemp <- contemp.edges[contemp.edges[, "from"] == n, ]
if (nrow(n.is.contemp) > 0){
tib.gd.nd[n , "equal"][[1]] <- list(n.is.contemp[, "to"])
}
}
## see equal nodes
# equals are listed in "equals" and "context"
eqs <-  tib.gd.nd[as.vector(!is.na(tib.gd.nd[, "equal"])), ]
# /!\ what if different layers ?
nds.equals <- unlist(unique(c(eqs$context, eqs$equal)))
get.eq <- get.bl <- get.ab <- list()
# df <- tib.gd.nd
for (n in nds.equals){
# n <- 2
# get
other.equal <- nds.equals[nds.equals != n]
tib.gd.nd[n, "equal"][[1]] <- list(other.equal)
}
## merge values for equal nodes
# see above for equal nodes
ab <- unique(as.vector(unlist(tib.gd.nd[nds.equals, "above"])))
ab <- ab[!is.na(ab)]
if(is.logical(ab)) ab <- NA
tib.gd.nd[nds.equals, "above"][[1]] <- list(ab)
# see below for equal nodes
bl <- unique(as.vector(unlist(tib.gd.nd[nds.equals, "below"])))
bl <- bl[!is.na(bl)]
# avoid logical(0)
if(is.logical(bl)) bl <- NA
tib.gd.nd[nds.equals, "below"][[1]] <- list(bl)
## merge for overlap nodes (non equal)
for(i in nrow(tib.gd.nd)){
# i <- 1
ov <- unique(as.vector(unlist(tib.gd.nd[i, "below"])))
node.to.add <- setdiff(nds.equals, ov)
is.above <- unique(as.vector(unlist(tib.gd.nd[node.to.add, "above"])))
}
#
all.above <- as.vector(unlist(tib.gd.nd[, "above"]))
for(i in 1:length(all.above)){
# i <- 2
# ctx <- all.above[i]
context <- as.vector(unlist(tib.gd.nd[i, "context"]))
# find the nodes where the context is above
abv <- as.character(which(all.above %in% context))
# avoid character(0)
abv[length(abv) == 0] <- NA
tib.gd.nd[i, "below"][[1]] <- list(abv)
}
# add "natural" at the bottom
tib.gd.nd[nrow(tib.gd.nd)+1, "context"] <- "natural"
# select nodes without any nodes below them
down.nodes <- as.vector(unlist(tib.gd.nd[is.na(tib.gd.nd[, "below"]), "context"]))
# the down.nodes are upper the "natural"
tib.gd.nd[nrow(tib.gd.nd), "above"][[1]] <- list(down.nodes)
# add "natural" below the down.nodes
tib.gd.nd[down.nodes, "below"][[1]] <- list("natural")
# - - - - - - - - - - - - - -
# gd.all <- tbl_graph(nodes = tib.gd.nd, edges = edges.iba)
h12_graph <- stratigraph(tib.gd.nd, "context", "above") # works harris12, ~ with 'gd.all'
# ggraph(h12_graph, layout = "sugiyama") +
#   geom_edge_elbow() +
#   geom_node_label(aes(label = context), label.r = unit(0, "mm")) +
#   theme_graph()
a.g <- ggraph(h12_graph, layout = "sugiyama") +
geom_edge_elbow() +
geom_node_label(aes(label = context), label.r = unit(0, "mm")) +
theme_graph()
# knitr::include_graphics(c("path/to/img1","path/to/img1"))
grid.arrange(ibahernando, a.g, ncol = 2)
img <- "C:/Rprojects/iconr/doc/img/Abela.jpg"
?walk
# library(sf)
library(Momocs)
library(iconr)
########### list decor ###########################
library(RPostgreSQL)
library(stringr)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname="mailhac_9",
host="localhost",
port=5432,
user="postgres",
password="postgres")
sqll <- "SELECT site, numero, img FROM objets where famille LIKE 'stele bouclier'"
df.objects <- dbGetQuery(con,sqll)
dbDisconnect(con)
df.objects <- head(df.objects)
df.objects$img[1]
str_split(df.objects$img[1], pattern = "\\\\")
unlist(str_split(df.objects$img[1], pattern = "\\\\"))
df <- unlist(str_split(df.objects$img[1], pattern = "\\\\"))
df
df <- unlist(str_split(df.objects$img, pattern = "\\\\"))
df
df <- str_split(df.objects$img, pattern = "\\\\")
df
length(df)
df[[1]]
df[[1]][3]
a.site <- df[[1]][3]
a.site
str_replace(a.site, "%20", " ")
for(i in seq(1, length(df))){
a.site <- str_replace(df[[i]][3], "%20", " ")
a.decor <- str_replace(df[[i]][4], "%20", " ")
}
a.decor
mycsv <- data.frame(site = character(),
decor = character())
df.objects <- head(df.objects)
df <- str_split(df.objects$img, pattern = "\\\\")
for(i in seq(1, length(df))){
a.site <- str_replace(df[[i]][3], "%20", " ")
a.decor <- str_replace(df[[i]][4], "%20", " ")
mycsv <- rbind(mycsv, c(a.site, a.decor))
}
mycsv
mycsv <- data.frame(site = character(),
decor = character())
df.objects <- head(df.objects)
df <- str_split(df.objects$img, pattern = "\\\\")
for(i in seq(1, length(df))){
a.site <- str_replace(df[[i]][3], "%20", " ")
a.decor <- str_replace(df[[i]][4], "%20", " ")
mycsv1 <- data.frame(site = a.site,
decor = a.decor)
mycsv <- rbind(mycsv, mycsv1)
}
mycsv
mycsv <- data.frame(site = character(),
decor = character())
df.objects <- head(df.objects)
df <- str_split(df.objects$img, pattern = "\\\\")
for(i in seq(1, length(df))){
a.site <- str_replace_all(df[[i]][3], "%20", " ")
a.decor <- str_replace_all(df[[i]][4], "%20", " ")
mycsv1 <- data.frame(site = a.site,
decor = a.decor)
mycsv <- rbind(mycsv, mycsv1)
}
mycsv
library(RPostgreSQL)
library(stringr)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname="mailhac_9",
host="localhost",
port=5432,
user="postgres",
password="postgres")
sqll <- "SELECT site, numero, img FROM objets where famille LIKE 'stele bouclier'"
df.objects <- dbGetQuery(con,sqll)
dbDisconnect(con)
mycsv <- data.frame(site = character(),
decor = character())
# df.objects <- head(df.objects)
df <- str_split(df.objects$img, pattern = "\\\\")
for(i in seq(1, length(df))){
a.site <- str_replace_all(df[[i]][3], "%20", " ")
a.decor <- str_replace_all(df[[i]][4], "%20", " ")
mycsv1 <- data.frame(site = a.site,
decor = a.decor)
mycsv <- rbind(mycsv, mycsv1)
}
mycsv
write.table(mycsv, "C:/Rprojects/iconr/doc/dev/temp_list.csv")
write.table(mycsv, "C:/Rprojects/iconr/doc/dev/temp_list.csv", row.names = F)
write.table(mycsv, "C:/Rprojects/iconr/doc/dev/temp_list.csv", row.names = F, sep = ";")
#| echo: true
library(iconr)
dataDir <- system.file("extdata", package = "iconr")
imgs_path <- paste0(dataDir, "/imgs.csv")
imgs <- read.table(imgs_path, sep=";", stringsAsFactors = FALSE)
#| echo: true
library(iconr)
dataDir <- system.file("extdata", package = "iconr")
imgs_path <- paste0(dataDir, "/imgs.csv")
imgs <- read.table(imgs_path, sep=";", stringsAsFactors = FALSE)
## works with SHP, CSV and TSV files
nodes_path <- paste0(dataDir, "/nodes.shp")
nodes.shp <- rgdal::readOGR(dsn = nodes_path, verbose = FALSE)
nodes <- as.data.frame(nodes.shp)
edges_path <- paste0(dataDir, "/edges.shp")
edges.shp <- rgdal::readOGR(dsn = edges_path, verbose = FALSE)
edges <- as.data.frame(edges.shp)
#| echo: true
library(iconr)
## DATA
dataDir <- system.file("extdata", package = "iconr")
imgs_path <- paste0(dataDir, "/imgs.csv")
imgs <- read.table(imgs_path, sep=";", stringsAsFactors = FALSE)
knitr::kable(imgs, "html") %>%
kableExtra::kable_styling(full_width = FALSE, position = "center", font_size=12)
#| echo: true
library(iconr)
library(dplyr)
library(knitr)
library(kableExtra)
## DATA
dataDir <- system.file("extdata", package = "iconr")
imgs_path <- paste0(dataDir, "/imgs.csv")
imgs <- read.table(imgs_path, sep = ";", stringsAsFactors = FALSE)
kable(imgs, "html") %>%
kable_styling(full_width = FALSE, position = "center", font_size = 12)
## works with SHP, CSV and TSV files
nodes_path <- paste0(dataDir, "/nodes.shp")
nodes.shp <- rgdal::readOGR(dsn = nodes_path, verbose = FALSE)
nodes <- as.data.frame(nodes.shp)
edges_path <- paste0(dataDir, "/edges.shp")
edges.shp <- rgdal::readOGR(dsn = edges_path, verbose = FALSE)
edges <- as.data.frame(edges.shp)
## iconr FUNCTIONS
lgrph <- list_dec(imgs, nodes, edges)
g <- lgrph[[1]]
#| echo: true
library(iconr)
library(dplyr)
library(knitr)
library(kableExtra)
#| echo: true
dataDir <- system.file("extdata", package = "iconr")
imgs_path <- paste0(dataDir, "/imgs.csv")
imgs <- read.table(imgs_path, sep = ";", stringsAsFactors = FALSE)
kable(imgs, "html") %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| echo: true
nodes_path <- paste0(dataDir, "/nodes.shp")
nodes.shp <- rgdal::readOGR(dsn = nodes_path, verbose = FALSE)
nodes <- as.data.frame(nodes.shp)
kable(nodes, "html") %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| echo: true
nodes_path <- paste0(dataDir, "/nodes.shp")
nodes.shp <- sf::st_read(nodes_path)
nodes <- as.data.frame(nodes.shp)
kable(nodes, "html") %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| echo: true
nodes_path <- paste0(dataDir, "/nodes.shp")
nodes.shp <- st_read(nodes_path)
#| echo: true
# install.packages("iconr")
# install.packages("dplyr")
# install.packages("knitr")
# install.packages("kableExtra")
library(iconr)
library(sf)
library(dplyr)
library(knitr)
library(kableExtra)
nodes.shp <- st_read(nodes_path)
nodes.shp <- st_read(nodes_path, quiet = T)
#| echo: true
edges_path <- paste0(dataDir, "/edges.shp")
edges.shp <- st_read(edges_path, quiet = T)
edges <- as.data.frame(edges.shp)
#| echo: true
edges_path <- paste0(dataDir, "/edges.shp")
edges.shp <- st_read(edges_path, quiet = T)
edges <- as.data.frame(edges.shp)
kable(nodes, "html") %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| echo: true
edges_path <- paste0(dataDir, "/edges.shp")
edges.shp <- st_read(edges_path, quiet = T)
edges <- as.data.frame(edges.shp)
kable(edges, "html") %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
nodes
library(shiny)
library(rmarkdown)
library(plotly)
library(archdata)
library(ggtern)
data(OxfordPots)
#| echo: true
# install.packages("iconr")
# install.packages("sf")
# install.packages("dplyr")
# install.packages("knitr")
# install.packages("kableExtra")
library(iconr)
library(sf)
library(dplyr)
library(knitr)
library(kableExtra)
#| echo: true
dataDir <- system.file("extdata", package = "iconr")
imgs_path <- paste0(dataDir, "/imgs.csv")
imgs <- read.table(imgs_path, sep = ";", stringsAsFactors = FALSE)
kable(imgs, "html") %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| echo: true
nodes_path <- paste0(dataDir, "/nodes.shp")
nodes.shp <- st_read(nodes_path, quiet = T)
nodes <- as.data.frame(nodes.shp)
kable(nodes, "html") %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| echo: true
edges_path <- paste0(dataDir, "/edges.shp")
edges.shp <- st_read(edges_path, quiet = T)
edges <- as.data.frame(edges.shp)
kable(edges, "html") %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| echo: true
lgrph <- list_dec(imgs, nodes, edges)
g <- lgrph[[1]]
par(mar=c(1, 0, 2, 0), mfrow=c(1, 2), cex.main = 0.9, font.main = 1)
coords <- layout.fruchterman.reingold(lgrph[[1]])
library(igraph)
#| echo: true
lgrph <- list_dec(imgs, nodes, edges)
g <- lgrph[[1]]
par(mar=c(1, 0, 2, 0), mfrow=c(1, 2), cex.main = 0.9, font.main = 1)
coords <- layout.fruchterman.reingold(lgrph[[1]])
plot(g,
vertex.size = 15,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Graph drawing based on x, y coordinates"
)
plot(g,
layout = layout.fruchterman.reingold(g),
vertex.size = 5 + degree(g)*10,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Force-directed graph drawing,\nwith degree-dependent node size."
)
mtext(g$decor, cex = 1, side = 1, line = -1, outer = TRUE)
#| echo: true
#| fig-cap: g$decor
lgrph <- list_dec(imgs, nodes, edges)
g <- lgrph[[1]]
par(mar=c(1, 0, 2, 0), mfrow=c(1, 2), cex.main = 0.9, font.main = 1)
coords <- layout.fruchterman.reingold(lgrph[[1]])
plot(g,
vertex.size = 15,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Graph drawing based on x, y coordinates"
)
plot(g,
layout = layout.fruchterman.reingold(g),
vertex.size = 5 + degree(g)*10,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Force-directed graph drawing,\nwith degree-dependent node size."
)
mtext(g$decor, cex = 1, side = 1, line = -1, outer = TRUE)
#| echo: true
#| fig-cap: Cerro Muriano 1
#| cap-location: margin
lgrph <- list_dec(imgs, nodes, edges)
g <- lgrph[[1]]
par(mar=c(1, 0, 2, 0), mfrow=c(1, 2), cex.main = 0.9, font.main = 1)
coords <- layout.fruchterman.reingold(lgrph[[1]])
plot(g,
vertex.size = 15,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Graph drawing based on x, y coordinates"
)
plot(g,
layout = layout.fruchterman.reingold(g),
vertex.size = 5 + degree(g)*10,
vertex.frame.color="white",
vertex.label.family = "sans",
vertex.label.cex = .8,
main = "Force-directed graph drawing,\nwith degree-dependent node size."
)
#| echo: false
dataDir <- system.file("extdata", package = "iconr")
eds.df <- read_eds(site = "Cerro Muriano", decor = "Cerro Muriano 1", dir = dataDir)
kable(head(eds.df), "html", align = "llcccrrrr") %>%
kable_styling(full_width = FALSE, position = "center", font_size=12) %>%
gsub("\\+", "$+$", .)
#| echo: false
dataDir <- system.file("extdata", package = "iconr")
eds.df <- read_eds(site = "Cerro Muriano", decor = "Cerro Muriano 1", dir = dataDir)
kable(head(eds.df), "html", align = "llcccrrrr") %>%
kable_styling(full_width = FALSE, position = "center", font_size=12) %>%
gsub("\\+", "$+$", .)
include_graphics('../../img/cm1.png')
